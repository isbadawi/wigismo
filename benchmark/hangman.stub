service {
    const html InitRNG = <html><body>
        <p>Enter an integer to use as the seed for the RNG:</p>
        <input type="text" name="seed">
    </body></html>;

    const html OK = <html><body>
        <p>Alright; Random Number Generator seeded. Now go <a href="?Play">play</a>. </p>
    </body></html>;

    const html Guess = <html><head><link href="../style.css" rel="stylesheet" type="text/css"></head>
    <body>
        <center><h1>Hangman</h1>
        <p><[img]></p>
        <span class="word"><p><[l0]>&nbsp;<[l1]>&nbsp;<[l2]>&nbsp;<[l3]>&nbsp;<[l4]>&nbsp;<[l5]>&nbsp;<[l6]></p></span>
        <p>Tried so far: <[tried]></p>
        <div>
            <input name="guess" type="radio" value="Q">Q
            <input name="guess" type="radio" value="W">W
            <input name="guess" type="radio" value="E">E
            <input name="guess" type="radio" value="R">R
            <input name="guess" type="radio" value="T">T
            <input name="guess" type="radio" value="Y">Y
            <input name="guess" type="radio" value="U">U
            <input name="guess" type="radio" value="I">I
            <input name="guess" type="radio" value="O">O
            <input name="guess" type="radio" value="P">P
        </div>
            <input name="guess" type="radio" value="A">A
            <input name="guess" type="radio" value="S">S
            <input name="guess" type="radio" value="D">D
            <input name="guess" type="radio" value="F">F
            <input name="guess" type="radio" value="G">G
            <input name="guess" type="radio" value="H">H
            <input name="guess" type="radio" value="J">J
            <input name="guess" type="radio" value="K">K
            <input name="guess" type="radio" value="L">L
        </div>
        <div>
            <input name="guess" type="radio" value="Z">Z
            <input name="guess" type="radio" value="X">X
            <input name="guess" type="radio" value="C">C
            <input name="guess" type="radio" value="V">V
            <input name="guess" type="radio" value="B">B
            <input name="guess" type="radio" value="N">N
            <input name="guess" type="radio" value="M">M
        </div></center>
    </body></html>;

    const html Win = <html><body>
        <center><h1>YOU ARE THE BEST WINNER</h1>
        <p>The word was indeed <[l0]><[l1]><[l2]><[l3]><[l4]><[l5]><[l6]>.
        </p>You win, and it only took you <[guesses]> guesses!
        <p><a href="?Play">Play again!</a></p></center>
    </body></html>;

    const html Lose = <html><body>
        <center><h1>FAIL!!!</h1>
        <p><[img]></p>
        <p>The word was <[word]>.</p>
        <p><a href="?Play">Play again!</a></p></center>
    </body></html>;

    schema Word {
        string word;
        int indexA; int indexB; int indexC; int indexD; int indexE;
        int indexF; int indexG; int indexH; int indexI; int indexJ;
        int indexK; int indexL; int indexM; int indexN; int indexO;
        int indexP; int indexQ; int indexR; int indexS; int indexT;
        int indexU; int indexV; int indexW; int indexX; int indexY;
        int indexZ;
    }

    /* Global variables */
    int seed;
    string hangmanImg00;
    string hangmanImg0;
    string hangmanImg1;
    string hangmanImg2;
    string hangmanImg3;
    string hangmanImg4;
    string hangmanImg5;
    string hangmanImg6;
    string hangmanImg7;
    string hangmanImg8;
    string hangmanImg9;
    string hangmanImg10;
    string hangmanImg11;
    string hangmanImg12;

    int random(int low, int high) {
        seed = (1664525 * seed + 1013904223) % 4294967296;
        return low + seed % (high - low + 1);
    }

    tuple Word initWord() {
        tuple Word result;
        result.word = "";
        result.indexA = -1; result.indexB = -1; result.indexC = -1;
        result.indexD = -1; result.indexE = -1; result.indexF = -1;
        result.indexG = -1; result.indexH = -1; result.indexI = -1;
        result.indexJ = -1; result.indexK = -1; result.indexL = -1;
        result.indexM = -1; result.indexN = -1; result.indexO = -1;
        result.indexP = -1; result.indexQ = -1; result.indexR = -1;
        result.indexS = -1; result.indexT = -1; result.indexU = -1;
        result.indexV = -1; result.indexW = -1; result.indexX = -1;
        result.indexY = -1; result.indexZ = -1; 
        return result;
    }

    int indexOf(tuple Word word, string letter) {
        if (letter == "A")
            return word.indexA;
        if (letter == "B")
            return word.indexB;
        if (letter == "C")
            return word.indexC;
        if (letter == "D")
            return word.indexD;
        if (letter == "E")
            return word.indexE;
        if (letter == "F")
            return word.indexF;
        if (letter == "F")
            return word.indexF;
        if (letter == "G")
            return word.indexG;
        if (letter == "H")
            return word.indexH;
        if (letter == "I")
            return word.indexI;
        if (letter == "J")
            return word.indexJ;
        if (letter == "K")
            return word.indexK;
        if (letter == "L")
            return word.indexL;
        if (letter == "M")
            return word.indexM;
        if (letter == "N")
            return word.indexN;
        if (letter == "O")
            return word.indexO;
        if (letter == "P")
            return word.indexP;
        if (letter == "Q")
            return word.indexQ;
        if (letter == "R")
            return word.indexR;
        if (letter == "S")
            return word.indexS;
        if (letter == "T")
            return word.indexT;
        if (letter == "U")
            return word.indexU;
        if (letter == "V")
            return word.indexV;
        if (letter == "W")
            return word.indexW;
        if (letter == "X")
            return word.indexX;
        if (letter == "Y")
            return word.indexY;
        if (letter == "Z")
            return word.indexZ;
        return -1;
    }

    <<W>>

    string getHangmanImage(int n) {
        if (n == 0)
            return "<img src=\"../img/hangmanImg00.png\"";
        if (n == 1)
            return "<img src=\"../img/hangmanImg0.png\"";
        if (n == 2)
            return "<img src=\"../img/hangmanImg1.png\"";
        if (n == 3)
            return "<img src=\"../img/hangmanImg2.png\"";
        if (n == 4)
            return "<img src=\"../img/hangmanImg3.png\"";
        if (n == 5)
            return "<img src=\"../img/hangmanImg4.png\"";
        if (n == 6)
            return "<img src=\"../img/hangmanImg5.png\"";
        if (n == 7)
            return "<img src=\"../img/hangmanImg6.png\"";
        if (n == 8)
            return "<img src=\"../img/hangmanImg7.png\"";
        if (n == 9)
            return "<img src=\"../img/hangmanImg8.png\"";
        if (n == 10)
            return "<img src=\"../img/hangmanImg9.png\"";
        if (n == 11)
            return "<img src=\"../img/hangmanImg10.png\"";
        if (n == 12)
            return "<img src=\"../img/hangmanImg11.png\"";
        if (n == 13)
            return "<img src=\"../img/hangmanImg12.png\"";
        return "";
    }

    bool found(string l0, string l1, string l2, string l3, string l4,
               string l5, string l6) {
        return !(l0 == "_" || l1 == "_" || l2 == "_" || l3 == "_" || 
               l4 == "_" || l5 == "_" || l6 == "_");
    }

    session Play() {
        string l0, l1, l2, l3, l4, l5, l6;
        tuple Word word;
        string guess;
        int guesses;
        string tried;
        string image;
        tried = "";
        word = getWord(random(0, 500));
        l0 = l1 = l2 = l3 = l4 = l5 = l6 = "_";
        guesses = 0;
        while (!found(l0, l1, l2, l3, l4, l5, l6)) { 
            int index;
            image = getHangmanImage(guesses);
            show plug Guess[img=image, l0=l0, l1=l1, l2=l2, l3=l3, l4=l4, l5=l5, 
                l6=l6, tried=tried] receive [guess=guess];
            index = indexOf(word, guess);
            if (index == 0)
                l0 = guess;
            else if (index == 1)
                l1 = guess;
            else if (index == 2)
                l2 = guess;
            else if (index == 3)
                l3 = guess;
            else if (index == 4)
                l4 = guess;
            else if (index == 5)
                l5 = guess;
            else if (index == 6)
                l6 = guess;
            else 
                guesses = guesses + 1;
            tried = tried + guess;
            if (guesses == 13)
                exit plug Lose[img=getHangmanImage(13), word=word.word];
        }
        exit plug Win[l0=l0,l1=l1,l2=l2,l3=l3,l4=l4,l5=l5,l6=l6,
            guesses=guesses + 7];
    }

    session Init() {
        show InitRNG receive[seed=seed];
        exit OK;
    }
}
