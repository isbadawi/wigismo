Ismail Badawi - 260375313
Carla Morawicz - 260330178

Type rules in ordinary prose:

====================
Sessions & Functions
====================
A session or function is type correct if its body is type correct.

Statements
==========

The skip statement (";") is always type correct.

A sequence (s1, s2) of statements is type correct is s1 and s2 are both
type correct.  

The expressions plugged into the show statement must type check; the variables 
received from a show must not be of a tuple type.

The expressions plugged into the exit statement must type check. 

A return statement is type correct if the type of the expression returned is
compatible with the return type of the function.
(Return statements in sessions do not pass the weeder.)

Block statements are type correct if their body is type correct.

An if statement is type correct if the condition expression is of type bool
and the body is type correct.

An if/else statement is type correct if the condition expression is of type bool
and both the then part and the else part of the statement are type correct.

A while statement is type correct if the condition expression is of type bool
and the body is type correct.

An expression statement is type correct if the expression is type correct.

==========
[-|*|/|%]:
==========
The left operand to the [-*/%] expression must be of type int; the right 
operand of the [-*/%] expression must be of type int; the result is of type
int.

=========
Addition:
=========
For addition, the two operands must be either strings or ints. If either or
both are strings, the result is a string, otherwise it's an int.

======
Assign
======
The type of the expression on the right hand side of the "=" must either be
of the same type or a compatible type as the identifier on the left hand side;
the result is the type that is evaluated from the right-hand side expression.

=====
&& ||
=====
The left and right expressions must be of type bool; the result is of type
bool.                

============
<, >, <=, >=
============
The left and right expressions must be of type int; the result is of type bool.

======
==, !=
======                                                          
The types of the left and right expressions must be the same or compatible,
where compatibility in the case of tuples refers to structural equivalence --
that is, every variable that appears in one of the schemas also appears in
the other schema with the same type -- the result is of type bool.

===========
Unary minus
===========
The expression must be of type int; the result is of type int.

=============
Function Call
=============
The types of the arguments of a function call must correspond to the types 
declared in the function's signature; the type of the expression is the 
return type of the function.

===
 !
===
The expression must be of type bool; the result is of type bool.

=========
Constants
=========
Any integer 0|[1-9][0-9]* is of type int.
The literals "true" and "false" are of type bool. \
Any double quoted string is of type string.  
Tuple literals have a tuple type -- their schema is defined implicitly by
the types of their field values, assuming they type check.


=============
Keep, Discard
=============
The expression on the left-hand-side must be of type tuple; each identifier 
appearing on the right hand side must appear in its schema; the result is tuple
type with a new schema generated automatically. 

=======
Combine
=======
The expressions on the left and right sides must be of type tuple; the common 
variables in their schemas must have the same type; the result is a tuple whose
schema is composed of the union of their variables.
